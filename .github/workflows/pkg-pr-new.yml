name: pkg-pr-new
on: 
  push:
    paths: 
      - 'packages/**'
    pull_request: 
      - 'packages/**'

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: read  

    steps:
    - name: Checkout code repository
      uses: actions/checkout@v4

    - name: Determine changes in packages
      uses: dorny/paths-filter@v3
      id: changes
      with: 
        filters: |
          base:
            - 'packages/base-ui/**'  
          accounts:
            - 'packages/accounts/**'  
          forms:
            - 'packages/forms/**'  
          pay:
            - 'packages/pay/**'
    
    - name: Create package list
      id: package_list
      if: steps.changes.outputs.base == 'true' || steps.changes.outputs.accounts == 'true' || steps.changes.outputs.forms == 'true' || steps.changes.outputs.pay == 'true'
      run: |
        PACKAGE_LIST=""
        if [ "${{ steps.changes.outputs.base }}" == "true" ]; then
          PACKAGE_LIST+="./packages/base-ui "
        fi
        if [ "${{ steps.changes.outputs.accounts }}" == "true" ]; then
          PACKAGE_LIST+="./packages/accounts "
        fi
        if [ "${{ steps.changes.outputs.forms }}" == "true" ]; then
          PACKAGE_LIST+="./packages/forms "
        fi
        if [ "${{ steps.changes.outputs.pay }}" == "true" ]; then
          PACKAGE_LIST+="./packages/pay "
        fi
        echo "PACKAGES_TO_PUBLISH=${PACKAGE_LIST}"
        echo "list=${PACKAGE_LIST}" >> $GITHUB_OUTPUT

    - name: Setup pnpm
      if: steps.package_list.outputs.list != ''
      uses: pnpm/action-setup@v4
      with:
        version: 10

    - name: Setup node.js
      if: steps.package_list.outputs.list != ''
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
    
    - name: Install dependencies
      if: steps.package_list.outputs.list != ''
      run: pnpm install

    - name: Publish Changed Packages
      if: steps.package_list.outputs.list != ''
      run: npx pkg-pr-new publish ${{ steps.package_list.outputs.list }} --json output.json --comment=off
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Post or update custom comment
      if: steps.package_list.outputs.list != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const output = JSON.parse(fs.readFileSync('output.json', 'utf8'));

          const packages = output
            .map((p) => `- ${p.name}: \`pnpm add ${p.url}\``)
            .join('\n');

          const sha = context.payload.pull_request.head.sha;
          const commitUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${sha}`;
          
          const body = `## Preview Ready!\n\nInstall preview packages for commit [${sha.substring(0, 7)}](${commitUrl}) using:\n\n${packages}`;
          
          const botCommentIdentifier = '## Preview Ready!';

          async function findBotComment(issueNumber) {
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
            });
            return comments.data.find((comment) =>
              comment.body.includes(botCommentIdentifier)
            );
          }

          const issueNumber = context.issue.number;
          const existingComment = await findBotComment(issueNumber);

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body,
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body,
            });
          }